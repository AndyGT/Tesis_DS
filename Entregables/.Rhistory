HSV = hsv(ctab[,1], ctab[,2], ctab[,3]), # Doesn't actually exist
Gray = gray(ctab[,1]),
gray(apply(ctab, 2, mean)))
else
gray(ctab[,1])
}
displayDataset <- function(x, offset = c(0, 0), region.dim = dim(x),
reduction = 1, band = NULL, col = NULL,
reset.par = TRUE, max.dim = 500, ...) {
.assertClass(x, 'GDALReadOnlyDataset')
offset <- rep(offset, length.out = 2)
region.dim <- rep(region.dim, length.out = 2)
reduction <- rep(reduction, length.out = 2)
if (is.null(band)) band <- 1
if (length(band) > 1)
warning('Displaying average of RGB values; ',
'this may take some time')
offset <- offset %% dim(x)[1:2]
outOfBounds <- (region.dim + offset) > dim(x)[1:2]
if (any(outOfBounds))
region.dim[outOfBounds]  <- {
dim(x)[outOfBounds] - offset[outOfBounds]
}
if (any(reduction < 1)) reduction[reduction < 1] <- 1
plot.dim <- region.dim / reduction
if (any(plot.dim > max.dim))
plot.dim <- max.dim * plot.dim / max(plot.dim)
if (any(plot.dim < 3))
plot.dim <- 3 * plot.dim / max(plot.dim)
image.data <- getRasterData(x, band, offset, region.dim,
plot.dim, as.is = TRUE)
if (length(dim(image.data)) > 2)
image.data <- apply(image.data, 1:2, mean)
if (is.complex(image.data))
image.data <- Mod(image.data)
max.val <- max(image.data, na.rm = TRUE)
if (!is.finite(max.val)) {
image.data[] <- 2
max.val <- 2
}
if (is.null(col))
col <- getColorTable(x, band)[1:(max.val + 1)]
if (is.null(col)) col <- gray(seq(0, 1, len = 64))
par.in <- par(no.readonly = TRUE)
if (reset.par) on.exit(par(par.in))
par(pin = max(par.in$pin)
* par.in$fin / max(par.in$fin)
* rev(plot.dim) / max(plot.dim))
image.data <- image.data[, ncol(image.data):1]
#  geoTrans <- getGeoTransFunc(dataset)
#  x.i <- 1:plot.dim[1] + offset[1]
#  y.i <- 1:plot.dim[2] + offset[2]
#  xy <- getGeoTransFunc(x)(x.i, y.i)
image.default(image.data + 1, col = col, ...)
invisible(image.data)
}
if (!isGeneric('image')) setGeneric('image', where = 2)
setMethod('image', 'GDALReadOnlyDataset', displayDataset)
setMethod('initialize', 'GDALRasterBand',
def =  function(object, dataset, band = 1) {
slot(object, 'handle') <- .Call('RGDAL_GetRasterBand',
dataset, as.integer(band))
object
})
setMethod('dim', 'GDALRasterBand',
def = function(x) {
c(.Call('RGDAL_GetYSize', x),
.Call('RGDAL_GetXSize', x))
})
getGeoTransFunc <- function(dataset) {
geoTrans <- .Call('RGDAL_GetGeoTransform', x)
rotMat <- matrix(geoTrans[c(6, 5, 3, 2)], 2)
offset <- geoTrans[c(4, 1)]
function(x, y = NULL) {
if (!is.null(y)) x <- cbind(x, y)
x <- x %*% rotMat
x[,1] <- x[,1] + offset[1]
x[,2] <- x[,2] + offset[2]
x
}
}
.First.lib <- function(lib, pkg) {
require(methods, quietly = TRUE, warn.conflicts = FALSE)
library.dynam('GDAL', pkg, lib)
.Call('RGDAL_Init')
cat('Geospatial Data Abstraction Library ')
cat('extensions to R successfully loaded\n')
}
install.packages("rgdal")
install.packages("RGDAL")
install.packages("gdalUtils")
install.packages("rgdal")
R.Version()
install.packages('rgdal', type='source')
install.packages("~/Downloads/rgdal_0.9-1.tgz", repos = NULL)
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(gRbase)
library(igraph)
install.packages("gRbase")
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
install.packages("gRim")
library(gRim)
library(dplyr)
library(Rgraphviz)
data(reinis)
library(gRim)
library(dplyr)
library(Rgraphviz)
data(reinis)
data(reinis)
reinis_df <- data.frame(reinis)
head(reinis_df)
install.packages("networkD3")
library(ggplot2)
library(plyr)
library(stringr)
library(reshape2)
library(igraph)
library(igraph)
red.1 <- graph(c(2,1,3,1,4,1,5,1,2,3), directed = FALSE)
plot(red.1)
get.data.frame(red.1, what='edges')
get.adjacency(red.1)
g <- ba.game(30, m=2) # generar un gr치fico aleatorio
coords <- layout.circle(g)
plot(g, layout = coords)
coords <- layout.fruchterman.reingold(g)
plot(g, layout = coords)
coords <- layout.fruchterman.reingold(g)
plot(g, layout = coords)
g <- ba.game(40, m=1) # generar un gr치fico aleatorio
library("networkD3")
aristas <- get.data.frame(g, what='edges') - 1
aristas$valor <- 1
nodos <- data.frame(nombre = factor(letters[1:40]), grupo=c(rep(1,15), rep(2,15), rep(3,10)))
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'from', Target ='to',Value = 'valor',
NodeID = 'nombre',  Group = 'grupo', opacity=0.9,
charge=-100)
nodos <- data.frame(nombre = factor(letters[1:40]), grupo=c(rep(1,15), rep(2,15), rep(3,10)))
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'from', Target ='to',Value = 'valor',
NodeID = 'nombre',  Group = 'grupo', opacity=0.5,
charge=-100)
nodos <- data.frame(nombre = factor(letters[1:40]), grupo=c(rep(1,15), rep(2,15), rep(3,10)))
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'from', Target ='to',Value = 'valor',
NodeID = 'nombre',  Group = 'grupo', opacity=0.9,
charge=-50)
nodos <- data.frame(nombre = factor(letters[1:40]), grupo=c(rep(1,15), rep(2,15), rep(3,10)))
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'from', Target ='to',Value = 'valor',
NodeID = 'nombre',  Group = 'grupo', opacity=0.9,
charge=-5)
nodos <- data.frame(nombre = factor(letters[1:40]), grupo=c(rep(1,15), rep(2,15), rep(3,10)))
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'from', Target ='to',Value = 'valor',
NodeID = 'nombre',  Group = 'grupo', opacity=0.9,
charge=-500)
nodos <- data.frame(nombre = factor(letters[1:40]), grupo=c(rep(1,15), rep(2,15), rep(3,10)))
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'from', Target ='to',Value = 'valor',
NodeID = 'nombre',  Group = 'grupo', opacity=0.9,
charge=-100)
red <- graph(c(1,2,2,3,3,1,2,4), directed = FALSE)
par(mar=c(0,0,0,0)); plot(red, vertex.size=40)
A.red <- get.adjacency(red)
A.red
desc.A <- eigen(A.red)
desc.A
library("igraphdata")
install.packages("igraphdata")
library("igraphdata")
data("UKfaculty")
ukf.und <- as.undirected(UKfaculty)
head(dat.1 <- get.data.frame((ukf.und)))
dat.1$from <- dat.1$from - 1
dat.1$to <- dat.1$to - 1
grupo <- get.vertex.attribute(UKfaculty, 'Group')
nodos <- data.frame(nombre=1:length(grupo), grupo=grupo)
nodos$nombre <- factor(nodos$nombre)
forceNetwork(dat.1, nodos, Source='from',Target='to',NodeID='nombre',
Group='grupo', opacity=0.9, Value='weight', charge=-400,
linkWidth = "function(d) { return 0.2*Math.sqrt(d.value); }")
A <- get.adjacency(ukf.und)
e.A <- eigen(as.matrix(A))
vec <- as.numeric(e.A$vector[,1])
e.A$values[1]
qplot(vec)
grupo <- -vec
nodos <- data.frame(nombre=1:length(grupo), grupo=grupo)
nodos$nombre <- factor(nodos$nombre)
forceNetwork(dat.1, nodos, Source='from',Target='to',NodeID='nombre',
Group='grupo', opacity=0.9, Value='weight', charge=-1000,
linkWidth = "function(d) { return 0.2*Math.sqrt(d.value); }",
colourScale ='d3.scale.linear().domain([0, 0.15, 0.35]).range(["lightblue", "orange", "red"])')
library(bnlearn)
data(marks)
str(marks)
ug = empty.graph(names(marks))
arcs(ug, ignore.cycles = TRUE) = matrix(
c("MECH", "VECT", "MECH", "ALG", "VECT", "MECH",
"VECT", "ALG", "ALG", "MECH", "ALG", "VECT",
"ALG", "ANL", "ALG", "STAT", "ANL", "ALG",
"ANL", "STAT", "STAT", "ALG", "STAT", "ANL"),
ncol = 2, byrow = TRUE,
dimnames = list(c(), c("from", "to")))
ug
dag = empty.graph(names(marks))
dad
dag
arcs(dag) = matrix(
c("VECT", "MECH", "ALG", "MECH", "ALG", "VECT",
"ANL", "ALG", "STAT", "ALG", "STAT", "ANL"),
ncol = 2, byrow = TRUE,
dimnames = list(c(), c("from", "to")))
dag
mat = matrix(c(0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
nrow = 5,
dimnames = list(nodes(dag), nodes(dag)))
dag2 = empty.graph(nodes(dag))
amat(dag2) = mat
all.equal(dag, dag2)
dag3 = empty.graph(nodes(dag))
dag3 = set.arc(dag3, "VECT", "MECH")
dag3 = set.arc(dag3, "ALG", "MECH")
dag3 = set.arc(dag3, "ALG", "VECT")
dag3 = set.arc(dag3, "ANL", "ALG")
dag3 = set.arc(dag3, "STAT", "ALG")
dag3 = set.arc(dag3, "STAT", "ANL")
all.equal(dag, dag3)
dag3 = empty.graph(nodes(dag))
dag3 = set.arc(dag3, "VECT", "MECH")
dag3 = set.arc(dag3, "ALG", "MECH")
dag3 = set.arc(dag3, "ALG", "VECT")
dag3 = set.arc(dag3, "ANL", "ALG")
dag3 = set.arc(dag3, "STAT", "ALG")
dag3 = set.arc(dag3, "STAT", "ANL")
all.equal(dag, dag3)
all.equal(ug, moral(dag))
node.ordering(dag)
nbr(dag, "ANL")
mb(dag, "ANL") # markov blanket
"ANL" %in% mb(dag, "ALG") # algebra esta en la sabana de analisis ?
"ALG" %in% mb(dag, "ANL")
chld = children(dag, "VECT") # cuales son los hijos de eso
par = parents(dag, "VECT")
o.par = sapply(chld, parents, x = dag)
unique(c(chld, par, o.par[o.par != "VECT"]))
mb(dag, "VECT")
score(dag, data = marks, type = "loglik-g")
dag.eq = reverse.arc(dag, "STAT", "ANL")
score(dag.eq, data = marks, type = "loglik-g")
# V-structure
vstructs(dag)
vstructs(dag.eq)
all.equal(cpdag(dag), cpdag(dag.eq))
all.equal(moral(dag), moral(dag.eq))
dag2 = drop.arc(dag, from = "STAT", to = "ANL")
dag3 = drop.arc(dag, from = "ALG", to = "VECT")
vstructs(dag2)
vstructs(dag3)
all.equal(cpdag(dag2), cpdag(dag3))
all.equal(moral(dag2), moral(dag3))
all.equal(moral(dag2), moral(dag))
all.equal(moral(dag3), moral(dag))
# Deal
library(deal)
deal.net = network(marks)
install.packages("deal")
deal.net = network(marks)
library(deal)
deal.net = network(marks)
deal.net
m = paste("[MECH][VECT|MECH][ALG|MECH:VECT]", "[ANL|ALG][STAT|ALG:ANL]", sep = "")
deal.net = as.network(m, deal.net)
deal.net
library(catnet)
install.packages("catnet")
Municipios_pobreza_riesgo <- read.csv("/Volumes/IRDR_ANDY/tarea esponda/Municipios_pobreza_riesgo.csv", stringsAsFactors=FALSE)
View(Municipios_pobreza_riesgo)
data <-  Municipios_pobreza_riesgo
library(dplyr)
library(knitr)
data <-  Municipios_pobreza_riesgo[-"LUGAR_NAC"]
data <-  Municipios_pobreza_riesgo[-LUGAR_NAC]
Trabajo_erick <- read.csv("~/Desktop/Trabajo_erick.csv", stringsAsFactors=FALSE)
View(Trabajo_erick)
Trabajo_erick <- read.csv("~/Desktop/Trabajo_erick.csv", stringsAsFactors=FALSE)
View(Trabajo_erick)
data <- read.csv("~/Desktop/Trabajo_erick.csv", stringsAsFactors=FALSE)
tama침o_m <- 4750*.7
data_train <- sample_n(data, tama침o_m)
data_test <- anti_join(data, mkt_train)
data_test <- anti_join(data, data_train)
data <- read.csv("~/Desktop/Trabajo_erick.csv", stringsAsFactors=FALSE)
tama침o_m <- 4750*.7
set.seed(130888)
data_train <- sample_n(data, tama침o_m)
data_test <- anti_join(data, data_train)
save.image("~/TF_Erick.RData")
library(bigrquery)
library(dplyr)
library(ggplot2)
library(knitr)
get_access_cred()
project <- "gdelt-964"  # ID proyecto
sql <- "SELECT MonthYear, count(*) FROM [gdelt-bq:full.events] WHERE ActionGeo_CountryCode = 'MX' group
by MonthYear order by MonthYear"
req.mx <- query_exec(sql, project = project)
get_access_cred()
FONDEN_IM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
View(FONDEN_IM_2013)
FONDEN_IM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
View(FONDEN_IM_2013)
FONDEN_IM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
View(FONDEN_IM_2014)
View(FONDEN_IM_2014)
FIM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
FIM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
FIM_2015 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2015.csv", stringsAsFactors=FALSE)
FIM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
FIM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
FIM_2015 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2015.csv", stringsAsFactors=FALSE)
View(FIM_2013)
tbl_df(FIM_2013)
library(plyr)
library(dplyr)
library(knitr)
library(Hmisc)
library(ggplot2)
library(lubridate)
tbl_df(FIM_2013)
names(FIM_2013)
str(FIM_2013)
str(FIM_2014)
str(FIM_2015)
summary(FIM_2013)
summary(FIM_2014)
summary(FIM_2015)
FIM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
FIM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
FIM_2015 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2015.csv", stringsAsFactors=FALSE)
names(FIM_2013)
str(FIM_2013)
str(FIM_2014)
str(FIM_2015)
summary(FIM_2013)
summary(FIM_2014)
summary(FIM_2015)
str(FIM_2013)
FIM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
FIM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
FIM_2015 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2015.csv", stringsAsFactors=FALSE)
names(FIM_2013)
str(FIM_2013)
str(FIM_2014)
str(FIM_2015)
summary(FIM_2013)
summary(FIM_2014)
summary(FIM_2015)
View(FIM_2013)
View(FIM_2013)
names(FIM_2013)
FIM_2013_1 <- data.frame( FIM_2013[1:9], (FIM_2013[10:12]*0.94),FIM_2013[13], (FIM_2013[14:18]*0.94))
View(FIM_2013)
View(FIM_2013)
View(FIM_2013_1)
View(FIM_2013_1)
#deflactamos 2014 a precios constantes de 2015
FIM_2014_1 <- data.frame( FIM_2014[1:9], (FIM_2014[10:12]*0.978),FIM_2014[13], (FIM_2014[14:18]*0.978))
FIM <- merge(FIM_2013_1, FIM_2014_1,FIM_2015)
FIM <- rbind(FIM_2013_1, FIM_2014_1,FIM_2015)
ggplot(FIM, aes(x=documento, y=Aportacion.Total))
geom_bar(fill="magenta", width=0.8, stat="identity")
geom_bar(fill="magenta", width=0.8)
ggplot(FIM, aes(x = documento, y= Aportacion.Total , color = Competencia))+
geom_point()
ggplot(FIM, aes(x = Documento, y= Aportacion.Total , color = Competencia))+
geom_point()
class(FIM$Competencia)
levels(FIM$Competencia)
level(FIM$Competencia)
describe(FIM$Competencia)
describe(FIM_2013$Competencia)
describe(FIM_2014$Competencia)
describe(FIM_2015$Competencia)
FIM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
FIM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
FIM_2015 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2015.csv", stringsAsFactors=FALSE)
names(FIM_2013)
str(FIM_2013)
str(FIM_2014)
str(FIM_2015)
summary(FIM_2013)
summary(FIM_2014)
summary(FIM_2015)
summary(FIM_2013[10:12, 14:18])
describe(FIM_2013)
describe(FIM_2013)
describe(FIM_2014)
describe(FIM_2015)
levels(FIM_2013$Competencia)
describe(FIM_2013)
describe(FIM_2014)
describe(FIM_2015)
#deflactamos 2013 a precios constantes de 2015
FIM_2013_1 <- data.frame( FIM_2013[1:9], (FIM_2013[10:12]*0.94),FIM_2013[13], (FIM_2013[14:18]*0.94))
#deflactamos 2014 a precios constantes de 2015
FIM_2014_1 <- data.frame( FIM_2014[1:9], (FIM_2014[10:12]*0.978),FIM_2014[13], (FIM_2014[14:18]*0.978))
#unimos las tres bases
FIM <- rbind(FIM_2013_1, FIM_2014_1,FIM_2015)
describe(FIM_2015$Competencia)
ggplot(FIM, aes(x = Documento, y= Aportacion.Total , color = Competencia))+
geom_bar()
ggplot(FIM, aes(x = Documento, y= Aportacion.Total , color = Competencia))+
geom_bar(stat="bin")
ggplot(FIM, aes(x = Documento, y= Aportacion.Total , color = Competencia))+
geom_bar(stat="identity")
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total , fill = Documento))+
geom_bar(stat="identity" )
level(FIM$Competencia)
levels(FIM$Competencia)
describe(FIM$Competencia)
FIM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
FIM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
FIM_2015 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2015.csv", stringsAsFactors=FALSE)
names(FIM_2013)
str(FIM_2013)
str(FIM_2014)
str(FIM_2015)
describe(FIM_2013)
describe(FIM_2014)
describe(FIM_2015)
#deflactamos 2013 a precios constantes de 2015
FIM_2013_1 <- data.frame( FIM_2013[1:9], (FIM_2013[10:12]*0.94),FIM_2013[13], (FIM_2013[14:18]*0.94))
#deflactamos 2014 a precios constantes de 2015
FIM_2014_1 <- data.frame( FIM_2014[1:9], (FIM_2014[10:12]*0.978),FIM_2014[13], (FIM_2014[14:18]*0.978))
#unimos las tres bases
FIM <- rbind(FIM_2013_1, FIM_2014_1,FIM_2015)
describe(FIM$Competencia)
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total , fill = Documento))+
geom_bar(stat="identity" )
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total , color = Documento))+
geom_bar(stat="identity" )
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total , fill = Documento))+
geom_bar(stat="identity" )
ggplotFIM, aes(x = Competencia, y= Aportacion.Total)) +
geom_jitter() +
facet_grid(Documento ~ Estado)
ggplotFIM, aes(x = Competencia, y= Aportacion.Total)) +
facet_grid(Documento ~ Estado)
ggplotFIM, aes(x = Competencia, y= Aportacion.Total)) +
facet_grid(Documento)
ggplotFIM, aes(x = Competencia, y= Aportacion.Total)) +
facet_grid(~Documento)
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total)) +
facet_grid(~Documento)
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total)) +
facet_grid(Estado ~ Documento)
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total)) +
geom_bar(stat="identity" )+
facet_grid(Estado ~ Documento)
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total)) +
geom_bar(stat="identity" )+
facet_grid(Estado = "Chiapas" ~ Documento)
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total)) +
geom_line()
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total, color = Estado)) +
geom_line()
ggplot(FIM, aes(x = Fecha.publicacion.DOF, y= Aportacion.Total, color = Estado)) + geom_line()
ggplot(FIM, aes(x = Fecha.publicacion.DOF, y= Aportacion.Total, color = Estado)) +geom_bar(stat="identity" )
ggplot(FIM, aes(x = Fecha.publicacion.DOF, y= Aportacion.Total, fill = Estado)) +geom_bar(stat="identity" )
ggplot(FIM, aes(x = Sectores.Afectados, y= Aportacion.Total, fill = Estado)) +geom_bar(stat="identity" )
ggplot(FIM, aes(x = Solicitud.de.Declaratoria, y= Aportacion.Total, fill = Estado)) +geom_bar(stat="identity" )
library(plyr)
library(dplyr)
library(knitr)
library(Hmisc)
library(ggplot2)
library(lubridate)
FIM_2013 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2013.csv", stringsAsFactors=FALSE)
FIM_2014 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2014.csv", stringsAsFactors=FALSE)
FIM_2015 <- read.csv("~/Dropbox/Tesis_CD/Datos/FONDEN/FONDEN_IM_2015.csv", stringsAsFactors=FALSE)
names(FIM_2013)
str(FIM_2013)
str(FIM_2014)
str(FIM_2015)
describe(FIM_2013)
describe(FIM_2014)
describe(FIM_2015)
#deflactamos 2013 a precios constantes de 2015
FIM_2013_1 <- data.frame( FIM_2013[1:9], (FIM_2013[10:12]*0.94),FIM_2013[13], (FIM_2013[14:18]*0.94))
#deflactamos 2014 a precios constantes de 2015
FIM_2014_1 <- data.frame( FIM_2014[1:9], (FIM_2014[10:12]*0.978),FIM_2014[13], (FIM_2014[14:18]*0.978))
#unimos las tres bases
FIM <- rbind(FIM_2013_1, FIM_2014_1,FIM_2015)
describe(FIM$Competencia)
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total , fill = Documento))+
geom_bar(stat="identity" )
ggplot(FIM, aes(x = Competencia, y= Aportacion.Total)) +
geom_bar(stat="identity" )+
facet_grid(Estado ~ Documento)
ggplot(FIM, aes(x = Fecha.publicacion.DOF, y= Aportacion.Total, fill = Estado)) +geom_bar(stat="identity" )
ggplot(FIM, aes(x = Solicitud.de.Declaratoria, y= Aportacion.Total, fill = Estado)) +geom_bar(stat="identity" )
ggplot(FIM, aes(x = Sectores.Afectados, y= Aportacion.Total, fill = Estado)) +geom_bar(stat="identity" )
setwd("~/Dropbox/Tesis_CD/Entregables")
H <return>
H
help
